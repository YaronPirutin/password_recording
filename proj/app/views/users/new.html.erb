<% @page_title = "Signup" %>
<div class="Sign_Form">
  <h1>Sign Up</h1>
  <%= form_for(:user, :url => {:controller => 'users', :action => 'create'}) do |f| %>
    <p> Username:</br> <%= f.text_field :username%> </p>
    <p> Password:</br> <%= f.password_field :password%></p>
    <p> Password Confirmation:</br> <%= f.password_field :password_confirmation%> </p>
    <%= f.submit :Signup %>
  <% end %>
  <% if @user.errors.any? %>
    <ul class="Signup_Errors">
    <% for message_error in @user.errors.full_messages %>
      <li>* <%= message_error %></li>
    <% end %>
    </ul>
  <% end %>
  <button onclick="startRecording(this);">record</button>
  <button onclick="stopRecording(this);" disabled>stop</button>

  <h2>Recordings</h2>
  <ul id="recordingslist"></ul>

  <h2>Log</h2>
  <pre id="log"></pre>
  <script>
    function __log(e, data) {
      log.innerHTML += "\n" + e + " " + (data || '');
    }
    var audio_context;
    var recorder;
    function startUserMedia(stream) {
      var input = audio_context.createMediaStreamSource(stream);
      __log('Media stream created.');
      // Uncomment if you want the audio to feedback directly
      //input.connect(audio_context.destination);
      //__log('Input connected to audio context destination.');

      recorder = new Recorder(input);
      __log('Recorder initialised.');
    }
    function startRecording(button) {
      recorder && recorder.record();
      button.disabled = true;
      button.nextElementSibling.disabled = false;
      __log('Recording...');
    }
    function stopRecording(button) {
      recorder && recorder.stop();
      button.disabled = true;
      button.previousElementSibling.disabled = false;
      __log('Stopped recording.');

      // create WAV download link using audio data blob
      createDownloadLink();

      recorder.clear();
    }
    function createDownloadLink() {
      object = new Object();
      object.sendToServer = true;
      // You can create a callback and set it in the config object.
      var config = {
        callback : myCallback
      }
      // in the callback, send the blob to the server if you set the property to true
      function myCallback(blob){
        if( object.sendToServer ){

          // create an object url
          // Matt actually uses this line when he creates Recorder.forceDownload()
          var url = (window.URL || window.webkitURL).createObjectURL(blob);

          // create a new request and send it via the objectUrl
          var request = new XMLHttpRequest();
          request.open("POST", url, true);
          request.responseType = "blob";
          request.onload = function(){
            // send the blob somewhere else or handle it here
            // use request.response
          }
          request.send();
        }
      }
      // very important! run the following exportWAV method to trigger the callback
      rec.exportWAV();
      /*recorder && recorder.exportWAV(function(blob) {
        var url = URL.createObjectURL(blob);
        var li = document.createElement('li');
        var au = document.createElement('audio');
        var hf = document.createElement('a');

        au.controls = true;
        au.src = url;
        hf.href = url;
        hf.download = new Date().toISOString() + '.wav';
        hf.innerHTML = hf.download;
        li.appendChild(au);
        li.appendChild(hf);
        recordingslist.appendChild(li);
      });*/

    }
    window.onload = function init() {
      try {
        // webkit shim
        window.AudioContext = window.AudioContext || window.webkitAudioContext;
        navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia;
        window.URL = window.URL || window.webkitURL;

        audio_context = new AudioContext;
        __log('Audio context set up.');
        __log('navigator.getUserMedia ' + (navigator.getUserMedia ? 'available.' : 'not present!'));
      } catch (e) {
        alert('No web audio support in this browser!');
      }

      navigator.getUserMedia({audio: true}, startUserMedia, function(e) {
        __log('No live audio input: ' + e);
      });
    };
  </script>
</div>
